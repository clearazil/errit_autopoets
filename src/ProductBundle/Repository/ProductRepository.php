<?php

namespace ProductBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use ProductBundle\Entity\ProductCategory;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    /**
     * @return int
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function productsWithoutCategoryCount()
    {
        $query = $this->createQueryBuilder('product')
            ->select('count(product.id)')
            ->where('product.category is NULL')
            ->getQuery();

        return (int)$query->getSingleScalarResult();
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function productsQuery()
    {
        return $this->createQueryBuilder('product')
            ->getQuery();
    }

    /**
     * @param $amount
     * @return \Doctrine\ORM\Query
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function randomProductsQuery($amount)
    {
        //Get the number of products
        $rows = (int)$this->createQueryBuilder('product')
            ->select('count(product.id)')
            ->getQuery()
            ->getSingleScalarResult();

        $offset = 0;
        if ($rows > $amount) {
            $offset = max(0, mt_rand(0, $rows - $amount - 1));
        }

        return $this->productsQuery()
            ->setMaxResults($amount)
            ->setFirstResult($offset);
    }

    /**
     * @param ProductCategory[] $categories
     * @param bool $other
     * @return \Doctrine\ORM\Query
     */
    public function categoriesWithProducts($categories, $other = false)
    {
        $query = $this->createQueryBuilder('product')->leftJoin('product.category', 'category');

        $count = 1;
        foreach ($categories as $category) {
            $query->orWhere('category.slug = :slug' . $count)
                ->setParameter('slug' . $count, $category->getSlug());
            $count++;
        }

        if ($other) {
            $query->orWhere('product.category IS NULL');
        }

        return $query->getQuery();
    }
}
